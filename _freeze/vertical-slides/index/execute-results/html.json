{
  "hash": "039c634e1503650a89391abdf98b90e3",
  "result": {
    "markdown": "---\nformat:\n  revealjs:\n    width: 1300\n    controls: true\n    transition: slide\n    theme: [default, style.scss]\n    parallax-background-image: narrow.png\n    parallax-background-size: \"28px 6000px\"\n---\n\n\n# Sinking Slides {style=\"text-align:right;\"}\n\n<h2>By James<h2>\n\n\n\n\n\n## {.center}\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n:::\n\n::: {.column width=\"50%\"}\nMy content is here!\n:::\n\n::::\n\n## {.center }\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n:::\n\n::: {.column width=\"50%\"}\nMy content is **there** (but it's white now to make things easier to track!)\n:::\n\n::::\n\n## {.center}\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n:::\n\n::: {.column width=\"50%\"}\nNow it's different content entirely:\n\n::: {.incremental}\n* Apples\n* Bananas\n* Oranges\n:::\n\n:::\n\n::::\n\n## {.center}\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nmyplot <- ggplot(diamonds) +\n  aes(price, carat) +\n  geom_point() +\n  theme_minimal(base_size = 24) +\n  theme(\n    text =\n      element_text(colour = \"white\"),\n    axis.text = \n      element_text(colour = \"white\"),\n    plot.background =\n      element_rect(fill = NA, colour = NA),\n    panel.background =\n      element_rect(fill = NA, colour = NA),\n    panel.grid =\n      element_line(colour = alpha(\"white\", 0.25))\n  )\n```\n:::\n\n:::\n\n::: {.column width=\"50%\"}\nLet's get more sophisticated with some evolving content. First, a ggplot2 graphic.\n:::\n\n::::\n\n## {.center auto-animate=true}\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell data-id='myplot'}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-3-1.png){width=960}\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\nHere it is on its own...\n:::\n\n::::\n\n## {.center auto-animate=true}\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell data-id='myplot'}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-4-1.png){width=960}\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\nBut now we can add another aesthetic!\n\n(It could use a legend, though...)\n:::\n\n::::\n\n## {.center .smaller}\n\n:::: {.columns}\n\n::: {.column width=\"40%\"}\n\n```{ojs}\n//| echo: true\nmydata = [\n  {\n    name: \"Azlan\",\n    team: \"Banana\",\n    value: 40\n  },\n  {\n    name: \"Vader\",\n    team: \"Apple\",\n    value: 75\n  },\n  {\n    name: \"Mickey\",\n    team: \"Orange\",\n    value: 15\n  },\n  {\n    name: \"Donald\",\n    team: \"Grape\",\n    value: 20\n  },\n  {\n    name: \"Pluto\",\n    team: \"Orange\",\n    value: 35\n  }\n]\n```\n\n:::\n\n::: {.column width=\"60%\"}\nOkay, that's not super exciting. Let's try something with D3.\n\nOne option is the [`revealVizScrollyteling` plugin](https://github.com/john-guerra/revealVizScrollyteling)...\n\n... but I'd really like to just let Revealjs's auto-animate take care of it and not write animations in a super imperative way.\n\nLet's see if attaching `data-id` attributes to our D3 elements is enough!\n:::\n\n::::\n\n## {.center}\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n```{ojs}\n// {\n//   const svg =\n//     d3.create(\"svg\")\n//       .attr(\"width\",  \"300px\")\n//       .attr(\"height\", \"500px\")\n//       .attr(\"viewBox\", [0, 0, 300, 500])\n//       .attr(\"style\",\n//         \"max-width: 100%; height: auto; height: intrinsic;\");\n\n//   // X axis\n//   var x = d3.scaleBand()  \n//     .range([ 0, width ])\n//     .domain(data.map(function(d) { return d.Country; }))\n//     .padding(0.2);\n//   svg.append(\"g\")\n//     .attr(\"transform\", \"translate(0,\" + height + \")\")\n//     .call(d3.axisBottom(x))\n//     .selectAll(\"text\")\n//       .attr(\"transform\", \"translate(-10,0)rotate(-45)\")\n//       .style(\"text-anchor\", \"end\");\n// }\n\nPlot.plot({\n  marks: [\n    Plot.barY(mydata,\n      {\n        x: \"team\",\n        y: \"value\",\n        name: \"name\"\n      })\n  ],\n  style: {\n    color: \"white\",\n    backgroundColor: \"transparent\"\n  }\n})\n```\n\n\n:::\n\n::: {.column width=\"50%\"}\nHere're some bars.\n:::\n\n::::",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}